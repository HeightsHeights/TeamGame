/******************************************************************************
 * ベクトル関係に必要なヘッダーの読み込み
******************************************************************************/
#include "./vector2f.h"

#include <cmath>
#include <stdio.h>

/******************************************************************************
 * class Vector2f
******************************************************************************/

//コンストラクタ///////////////////////////////////////////////////////////////
/***********************************
 * コンストラクタ
 * 引数：なし
************************************/
Vector2f::Vector2f() : Touple2f()
{
}
/***********************************
 * コンストラクタ
 * 引数：ベクトルの成分
 * 機能：それぞれの成分を初期化
************************************/
Vector2f::Vector2f(float x, float y) : Touple2f(x, y)
{
}

//演算子のオーバーロード///////////////////////////////////////////////////////

/***********************************
 * +演算子のオーバーロード
 * 引数：右辺のベクトル
 * 機能：ベクトルの足し算
************************************/
Vector2f Vector2f::operator+(Vector2f obj)
{
    return Vector2f(this->x + obj.x, this->y + obj.y);
}
/***********************************
 * -演算子のオーバーロード
 * 引数：右辺のベクトル
 * 機能：ベクトルの減算
************************************/
Vector2f Vector2f::operator-(Vector2f obj)
{
    return Vector2f(this->x - obj.x, this->y - obj.y);
}
/***********************************
 * *演算子のオーバーロード
 * 引数：右辺のスカラー
 * 機能：ベクトルのスカラー倍
************************************/
Vector2f Vector2f::operator*(float scalar)
{
    this->x *= scalar;
    this->y *= scalar;

    return *this;
}
/***********************************
 * /演算子のオーバーロード
 * 引数：右辺のスカラー
 * 機能：ベクトルのスカラーの逆数倍
************************************/
Vector2f Vector2f::operator/(float scalar)
{
    return *this * (1 / scalar);
}
/***********************************
 * =演算子のオーバーロード
 * 引数：右辺のベクトル
 * 機能：ベクトル同士の代入
************************************/
Vector2f Vector2f::operator=(Vector2f obj)
{
    this->x = obj.x;
    this->y = obj.y;
    return *this;
}
/***********************************
 * その他代入演算子
************************************/
Vector2f Vector2f::operator+=(Vector2f obj)
{
    *this = *this + obj;
    return *this;
}
Vector2f Vector2f::operator-=(Vector2f obj)
{
    *this = *this - obj;
    return *this;
}
Vector2f Vector2f::operator*=(float scalar)
{
    *this = *this * scalar;
    return *this;
}
Vector2f Vector2f::operator/=(float scalar)
{
    *this = *this / scalar;
    return *this;
}
/***********************************
 * +演算子のオーバーロード
 * 引数：なし
 * 機能：特に意味離し
************************************/
Vector2f Vector2f::operator+()
{
    return *this;
}
/***********************************
 * -演算子のオーバーロード
 * 引数：なし
 * 機能：逆ベクトル
************************************/
Vector2f Vector2f::operator-()
{
    return *this * -1;
}

//メソッド/////////////////////////////////////////////////////////////////////
/***********************************
 * 引数：なし
 * 戻り値：絶対値の二乗
************************************/
float Vector2f::magnitudeSquared()
{
    return (float)(std::pow(x, 2.0) + std::pow(y, 2.0));
}
/***********************************
 * 引数：なし
 * 戻り値：絶対値
************************************/
float Vector2f::magnitude()
{
    return (float)sqrt(magnitudeSquared());
}
/***********************************
 * 引数：なし
 * 戻り値：正規化されたベクトル
************************************/
Vector2f Vector2f::normalize()
{
    float m = magnitude();
    return *this / m;
}
/***********************************
 * 引数：内積を取りたいベクトル2つ
 * 戻り値：内積の値
************************************/
float Vector2f::dot(Vector2f a, Vector2f b)
{
    return a.x * b.x + a.y * b.y;
}
/***********************************
 * 引数：外積を取りたいベクトル2つ
 * 戻り値：外積によって生じるベクトル
************************************/
Vector3f Vector2f::cross(Vector2f a, Vector2f b)
{
    return Vector3f(0, 0, a.x * b.y - a.y * b.x);
}